import random
import mysql.connector
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, MessageHandler, CallbackQueryHandler, CommandHandler, ConversationHandler, filters
import data_loader  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª data_loader

TOKEN = '7891116502:AAEyEMUVfoN5X0LY4JnkFds2v8-SMt9qhxk'
ANSWER = ''
EXPLANATION = ''
N_EXAMPLE = ''
# –≠—Ç–∞–ø—ã/—Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
FIRST, SECOND, TYPE_SELECTION = range(3)
# –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
NEXT, END = range(2)


async def start(update: Update, context):
    print("Received /start command")
    keyboard = [
        [
            InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è", callback_data='choose_type'),
        ],
        [
            InlineKeyboardButton("–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å", callback_data=str(END)),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! "
        f"–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠ –ø–æ –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏—é! \n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Å–µ–π—á–∞—Å —Ö–æ—Ç–∏—Ç–µ üëá", reply_markup=reply_markup)

    print("Sent reply to /start command")
    return FIRST


async def choose_type(update: Update, context):
    print("Choosing task type")
    keyboard = [
        [InlineKeyboardButton(f"–¢–∏–ø {i}", callback_data=str(i)) for i in range(1, 17)]  # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–∏–ø–æ–≤ —Å 1 –ø–æ 16
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è:", reply_markup=reply_markup
    )
    return TYPE_SELECTION


async def set_task_type(update: Update, context):
    query = update.callback_query
    selected_type = int(query.data)  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è
    context.user_data['task_type'] = selected_type  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ

    await query.answer()
    await query.edit_message_text(text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è: {selected_type}")

    # –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏—è, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–±–æ—Ä –∑–∞–¥–∞–Ω–∏—è)
    return await next_example(update, context)


async def stop(update: Update, context):
    print("Received /stop command")
    await update.message.reply_text(f'–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ! \n'
                                    f'–ï—Å–ª–∏ —Å–Ω–æ–≤–∞ –∑–∞—Ö–æ—á–µ—à—å —Ä–µ—à–∞—Ç—å, –Ω–∞–∂–º–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /start')
    return ConversationHandler.END


async def end(update: Update, context):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(text=f'–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ! \n'
                                       f'–ï—Å–ª–∏ —Å–Ω–æ–≤–∞ –∑–∞—Ö–æ—á–µ—à—å —Ä–µ—à–∞—Ç—å, –Ω–∞–∂–º–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /start')
    return ConversationHandler.END


async def next_example(update: Update, context):
    global ANSWER, EXPLANATION, N_EXAMPLE
    print("Fetching next example")
    query = update.callback_query
    await query.answer()

    selected_type = context.user_data.get('task_type', None)
    if selected_type is None:
        await query.edit_message_text('–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø.')
        return FIRST  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —à–∞–≥ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏—è

    connection = mysql.connector.connect(
        host='localhost',
        user='root',
        password='MinMin123',
        database='user_base'
    )
    cursor = connection.cursor()

    # –ü–æ–ª—É—á–∞–µ–º id –∑–∞–¥–∞–Ω–∏–π —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
    query = f'SELECT id_example FROM examples WHERE type = {selected_type}'
    cursor.execute(query)
    ids = [row[0] for row in cursor.fetchall()]
    if not ids:
        await query.edit_message_text(f'–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —Ç–∏–ø–∞ {selected_type}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∏–ø.')
        return FIRST

    N_EXAMPLE = random.choice(ids)

    query = f'SELECT question, answer, right_answer FROM examples WHERE id_example = {N_EXAMPLE}'
    cursor.execute(query)
    result = cursor.fetchone()
    cursor.close()
    connection.close()

    if result:
        question_text, ANSWER, EXPLANATION = result
        await update.callback_query.edit_message_text(f"*–ó–∞–¥–∞–Ω–∏–µ ‚Ññ {N_EXAMPLE}*\n {question_text}",
                                                      parse_mode='Markdown')
        await update.callback_query.message.reply_text(f"‚úç –ù–∞–ø–∏—à–∏—Ç–µ *–æ—Ç–≤–µ—Ç* –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ. "
                                                       f"–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ, —É–∫–∞–∂–∏—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ *–ø—Ä–æ–±–µ–ª*",
                                                       parse_mode='Markdown')
        print("Sent example question and answer request")
        return SECOND
    else:
        await update.callback_query.edit_message_text('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')


async def answer(update: Update, context):
    global ANSWER, EXPLANATION, N_EXAMPLE
    print("Received answer")
    user_answer = update.message.text.strip()
    if user_answer == ANSWER:
        await update.message.reply_text(f'ü•∞ –ü—Ä–∞–≤–∏–ª—å–Ω–æ, –æ—Ç–≤–µ—Ç: {ANSWER}')
    else:
        await update.message.reply_text(f'ü•∫ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –æ—Ç–≤–µ—Ç: {ANSWER}\n–ü–æ—è—Å–Ω–µ–Ω–∏–µ: {EXPLANATION}')

    keyboard = [
        [
            InlineKeyboardButton("ü§ì–°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ‚Äç", callback_data=str(NEXT)),
            InlineKeyboardButton("üò© –•–≤–∞—Ç–∏—Ç", callback_data=str(END)),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        text="üëá –í—ã–±–∏—Ä–∞–π—Ç–µ üëá", reply_markup=reply_markup
    )
    return FIRST


def main():
    print("Starting bot...")
    application = Application.builder().token(TOKEN).build()
    print("Application built...")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∞–π—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    data_loader.load_data()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            FIRST: [
                CallbackQueryHandler(choose_type, pattern='^choose_type$'),  # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                CallbackQueryHandler(next_example, pattern='^' + str(NEXT) + '$'),
                CallbackQueryHandler(end, pattern='^' + str(END) + '$')
            ],
            TYPE_SELECTION: [CallbackQueryHandler(set_task_type)],  # –ù–æ–≤—ã–π —ç—Ç–∞–ø –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏—è
            SECOND: [MessageHandler(filters.TEXT & ~filters.COMMAND, answer)],
        },
        fallbacks=[CommandHandler('stop', stop)],
        per_chat=True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä per_chat
    )

    application.add_handler(conv_handler)
    print("Handler added...")

    application.run_polling()
    print("Bot is polling...")


if __name__ == '__main__':
    main()
