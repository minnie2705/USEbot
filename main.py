import os
import random
import mysql.connector
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, Update
from telegram.ext import Application, MessageHandler, CallbackQueryHandler, CommandHandler, ConversationHandler, filters

TOKEN = '7891116502:AAEyEMUVfoN5X0LY4JnkFds2v8-SMt9qhxk'
ANSWER = ''
EXPLANATION = ''
N_EXAMPLE = ''
FIRST, SECOND, TYPE_SELECTION = range(3)
NEXT, END = range(2)


async def start(update: Update, context):
    print("Received /start command")
    keyboard = [
        [
            InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è", callback_data='choose_type'),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    menu_keyboard = [
        [KeyboardButton("/start"), KeyboardButton("/stop")]
    ]
    menu_markup = ReplyKeyboardMarkup(menu_keyboard, resize_keyboard=True)

    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠ –ø–æ –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏—é! \n",
        reply_markup=reply_markup
    )
    await update.message.reply_text(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.",
        reply_markup=menu_markup
    )

    print("Sent reply to /start command")
    return FIRST

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop
async def stop(update: Update, context):
    print("Received /stop command")
    await update.message.reply_text(f'–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ! \n'
                                    f'–ï—Å–ª–∏ —Å–Ω–æ–≤–∞ –∑–∞—Ö–æ—á–µ—à—å —Ä–µ—à–∞—Ç—å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /start.')
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏—è
async def choose_type(update: Update, context):
    print("Choosing task type")
    keyboard = [
        [InlineKeyboardButton(f"{i}", callback_data=str(i)) for i in range(1, 5)],
        [InlineKeyboardButton(f"{i}", callback_data=str(i)) for i in range(5, 9)],
        [InlineKeyboardButton(f"{i}", callback_data=str(i)) for i in range(9, 13)],
        [InlineKeyboardButton(f"{i}", callback_data=str(i)) for i in range(13, 17)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è:", reply_markup=reply_markup
    )
    return TYPE_SELECTION

async def set_task_type(update: Update, context):
    query = update.callback_query
    selected_type = int(query.data)
    context.user_data['task_type'] = selected_type

    await query.answer()
    await query.edit_message_text(text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è: {selected_type}")

    keyboard = [
        [
            InlineKeyboardButton("‚úç–†–µ—à–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è", callback_data=str(NEXT)),
        ],
        [
            InlineKeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data='choose_type'),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(
        "–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è?", reply_markup=reply_markup
    )

    return FIRST


#async def stop(update: Update, context):
    #print("Received /stop command")
   # await update.message.reply_text(f'–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ! \n'
                                    #f'–ï—Å–ª–∏ —Å–Ω–æ–≤–∞ –∑–∞—Ö–æ—á–µ—à—å —Ä–µ—à–∞—Ç—å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /start.')
    #return ConversationHandler.END


async def end(update: Update, context):
    query = update.callback_query
    await query.answer()


    await query.edit_message_text(f'–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ! \n'
                                  f'–ï—Å–ª–∏ —Å–Ω–æ–≤–∞ –∑–∞—Ö–æ—á–µ—à—å —Ä–µ—à–∞—Ç—å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /start.')
    return ConversationHandler.END


async def next_example(update: Update, context):
    global ANSWER, EXPLANATION, N_EXAMPLE
    print("Fetching next example")
    query = update.callback_query
    await query.answer()

    selected_type = context.user_data.get('task_type', None)
    if selected_type is None:
        await query.edit_message_text('–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø.')
        return FIRST

    connection = mysql.connector.connect(
        host='host.docker.internal',
        user='root',
        password='MinMin123',
        database='user_base'
    )
    cursor = connection.cursor()

    query = f'SELECT id_example, image_path FROM examples WHERE type_number = {selected_type}'
    cursor.execute(query)
    rows = cursor.fetchall()
    if not rows:
        await query.edit_message_text(f'–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —Ç–∏–ø–∞ {selected_type}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∏–ø.')
        return FIRST

    N_EXAMPLE, image_path = random.choice(rows)

    query = f'SELECT question, answer, right_answer FROM examples WHERE id_example = {N_EXAMPLE}'
    cursor.execute(query)
    result = cursor.fetchone()
    cursor.close()
    connection.close()

    if result:
        question_text, ANSWER, EXPLANATION = result
        await update.callback_query.edit_message_text(f"*–ó–∞–¥–∞–Ω–∏–µ ‚Ññ {N_EXAMPLE}*\n {question_text}",
                                                      parse_mode='Markdown')

        if selected_type == 9 and image_path:
            # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã –≤ –∫–æ–Ω—Ü–µ –ø—É—Ç–∏
            image_path = image_path.rstrip('\n')

            # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–µ 'images'
            image_file_path = os.path.join('images', image_path)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            if os.path.exists(image_file_path):
                await update.callback_query.message.reply_photo(photo=open(image_file_path, 'rb'))
            else:
                await update.callback_query.message.reply_text(
                    f"–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –ø—É—Ç–∏: {image_file_path}")

        await update.callback_query.message.reply_text(f"‚úç –ù–∞–ø–∏—à–∏—Ç–µ *–æ—Ç–≤–µ—Ç* –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ. ",
                                                       parse_mode='Markdown')
        print("Sent example question and answer request")
        return SECOND
    else:
        await update.callback_query.edit_message_text('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')


async def answer(update: Update, context):
    global ANSWER, EXPLANATION, N_EXAMPLE
    print("Received answer")
    user_answer = update.message.text.strip()
    if user_answer == ANSWER:
        await update.message.reply_text(f'ü•∞ –ü—Ä–∞–≤–∏–ª—å–Ω–æ, –æ—Ç–≤–µ—Ç: {ANSWER}')
    else:
        await update.message.reply_text(f'ü•∫ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –æ—Ç–≤–µ—Ç: {ANSWER}\n–ü–æ—è—Å–Ω–µ–Ω–∏–µ: {EXPLANATION}')

    keyboard = [
        [
            InlineKeyboardButton("ü§ì–°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ‚Äç)", callback_data=str(NEXT)),
            InlineKeyboardButton("üîé–ö –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏—è", callback_data='choose_type'),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        text="üëá –í—ã–±–∏—Ä–∞–π—Ç–µ üëá", reply_markup=reply_markup
    )
    return FIRST


async def start_again(update: Update, context):
    query = update.callback_query
    await query.answer()

    await query.message.bot.send_message(chat_id=update.effective_chat.id, text='/start')


async def start_button(update: Update, context):
    # –ö–æ–≥–¥–∞ –Ω–∞–∂–∏–º–∞–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞ /start
    return await start(update, context)  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã /start

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    print("Starting bot...")
    application = Application.builder().token(TOKEN).build()
    print("Application built...")

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],  # –î–ª—è /start
        states={
            FIRST: [
                CallbackQueryHandler(choose_type, pattern='^choose_type$'),
                CallbackQueryHandler(next_example, pattern='^' + str(NEXT) + '$'),
                CallbackQueryHandler(end, pattern='^' + str(END) + '$'),
                CallbackQueryHandler(start_again, pattern='^start_again$'),
            ],
            TYPE_SELECTION: [CallbackQueryHandler(set_task_type)],
            SECOND: [MessageHandler(filters.TEXT & ~filters.COMMAND, answer)],
        },
        fallbacks=[CommandHandler('stop', stop)],
        per_chat=True
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ /start
    application.add_handler(CallbackQueryHandler(start_button, pattern='^/start$'))

    application.add_handler(conv_handler)
    print("Handler added...")

    application.run_polling()
    print("Bot is polling...")

if __name__ == '__main__':
    main()
